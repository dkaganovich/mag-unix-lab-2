#!/usr/bin/env bash
 
if [ "${BASH_VERSINFO[0]}" -lt "4" ]; then
    echo "bash-4.0 or higher is required to run this script"
    exit 1
fi
 
if [ "$#" -gt "2" ]; then
    echo "Illegal number of arguments. Try 'paster --help' for more information"
    exit 1
fi

#parse args
while [ "$#" -gt 0 ]; do
case "$1" in
    -f|--file)
	    path="$2"
	    shift
    ;;
    -h|--help)
	    echo "USAGE: paster [-h] [-f FILE]"
	    exit 0
    ;;
    *)
		echo "Illegal arguments. Try 'paster --help' for more information"
    	exit 1
    ;;
esac
shift
done

# load data
if [ -z "$path" ]; then
    echo "Make a new paste (Ctrl-D to submit):"
    data=$(</dev/stdin)
else
    if [ -f "$path" ]; then
    	echo "Read file data"
        data=$(<"$path")
    else
        echo "File does not exist"
        exit 1
    fi
fi
 
# specifying language
declare -A langs
langs+=(
    ["bash"]="sh bash"
    ["c"]="c h"
    ["cpp"]="hpp hxx cpp cc cxx"
    ["java"]="java"
    ["javascript"]="js"
    ["php"]="php php3 php4 php5 phps phtml"
    ["python"]="py"
    ["ruby"]="rb"
    ["perl"]="pl pm"
    ["css"]="css"
    ["html5"]="html htm xhtml xht")
 
function lang_by_ext() {
    local ext="$1"
    local lang
    for lang in "${!langs[@]}"; do
        if [[ "${langs[$lang]}" =~ "${ext,,}" ]]; then
            echo "$lang"
            break
        fi
    done
    return 0
}

function lang_by_bin_name() {
	local bin_name="$1"
	if [[ "$bin_name" =~ ([[:alpha:]]+) ]]; then # cut off version if presents
        bin_name="${BASH_REMATCH[1]}"
    fi
	local lang
    for lang in "${!langs[@]}"; do
        if [ "$lang" = "$bin_name" ]; then
            echo "$lang"
            break
        fi
    done
    return 0
}
 
function lang_by_bin_path() {
	local bin_path="$1"
	local bin_name="${bin_path##*/}"
	local real_bin_path=$(readlink -f "$(which "$bin_path")" 2>/dev/null)
    local real_bin_name="${real_bin_path##*/}"
    local result=$(lang_by_bin_name "$real_bin_name")
    if [ -z "$result" ]; then
    	result=$(lang_by_bin_name "$bin_name")
    fi
    echo "$result"
    return 0
}

echo "Find out language..."
# try to parse file extension
if [ -n "$path" ]; then
    ext="${path##*.}"
    lang=$(lang_by_ext "$ext")
fi
# else try to analyze shebang
if [ -z "$lang" ]; then
    if [[ "$data" =~ \#![[:space:]]*([/[:alnum:]\.]+)[[:space:]]*([/[:alnum:]\.]+)* ]]; then
        grp_="${BASH_REMATCH[1]}"
        _grp="${BASH_REMATCH[2]}"
        lang=$(lang_by_bin_path "$grp_")
        if [ -z "$lang" ]; then
            lang=$(lang_by_bin_path "$_grp")
        fi
    fi
fi
if [ -n "$lang" ]; then
	echo "'$lang' detected"
fi
# default
if [ -z "$lang" ]; then
	echo "default to 'plain'"
    lang="plain"
fi

# sending request to the paste.ee endpoint
echo "Send data..."
if paste_url=$(curl --data "key=f897b34b487bedffdb8d2e77300743ce&paste=$data&format=simple&language=$lang" https://paste.ee/api 2>/dev/null); then
	echo "ok: $paste_url"
else
	echo "failed: $paste_url"
	exit 1
fi

# opening the url received
echo "Open URL..."
if [ -x "$BROWSER" ]; then
	exec "$BROWSER" "$paste_url"
fi

default_open=$(which xdg-open || which gnome-open)
if [ -n "$default_open" ]; then
	exec "$default_open" "$paste_url"
fi

echo "unable to open URL"
exit 0
